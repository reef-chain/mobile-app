// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

const FIREBASE_API_KEY = String.fromEnvironment("FIREBASE_API_KEY", defaultValue: "");
const FIREBASE_MESSAGING_SENDER_ID = String.fromEnvironment("FIREBASE_MESSAGING_SENDER_ID", defaultValue: "");
const FIREBASE_APP_ID_ANDROID = String.fromEnvironment("FIREBASE_APP_ID_ANDROID", defaultValue: "");
const FIREBASE_APP_ID_IOS = String.fromEnvironment("FIREBASE_APP_ID_IOS", defaultValue: "");
const FIREBASE_PROJECT_ID = String.fromEnvironment("FIREBASE_PROJECT", defaultValue: "");
const FIREBASE_STORAGE_BUCKET = String.fromEnvironment("FIREBASE_STORAGE_BUCKET", defaultValue: "");
const FIREBASE_IOS_BUNDLE_ID = String.fromEnvironment("FIREBASE_IOS_BUNDLE_ID", defaultValue: "");


/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: FIREBASE_API_KEY,
    appId: FIREBASE_APP_ID_ANDROID,
    messagingSenderId: FIREBASE_MESSAGING_SENDER_ID,
    projectId: FIREBASE_PROJECT_ID,
    storageBucket: FIREBASE_STORAGE_BUCKET,
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: FIREBASE_API_KEY,
    appId: FIREBASE_APP_ID_IOS,
    messagingSenderId: FIREBASE_MESSAGING_SENDER_ID,
    projectId: FIREBASE_PROJECT_ID,
    storageBucket: FIREBASE_STORAGE_BUCKET,
    iosBundleId: FIREBASE_IOS_BUNDLE_ID,
  );
}
